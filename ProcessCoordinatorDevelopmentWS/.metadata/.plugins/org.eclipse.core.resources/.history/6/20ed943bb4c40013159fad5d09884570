package com.marisoft.ziba.cep.tests.jms;

import java.net.URI;
import java.net.URISyntaxException;

import javax.jms.JMSException;
import javax.jms.Message;

import org.apache.activemq.broker.BrokerService;
import org.apache.activemq.broker.TransportConnector;
import org.junit.Before;
import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.jms.core.JmsTemplate;

import static org.junit.Assert.*;

import com.marisoft.ziba.cep.jms.EsperEventProcessingAgent;
import com.marisoft.ziba.cep.tests.utils.EventProducer;
import com.marisoft.ziba.cep.tests.utils.TestListener;


public class EventDetectionIT {

	private ApplicationContext applicationContext;
	private ApplicationContext testUtilsContext;
	private BrokerService broker;
	
	private void startBroker() throws Exception {
		broker = new BrokerService();
		
		TransportConnector connector = new TransportConnector();
		connector.setUri(new URI("tcp://localhost:1547"));
		broker.addConnector(connector);
		broker.start();
	}
	
	@Before
	public void setUp() throws Exception {
		startBroker();		
		applicationContext = new ClassPathXmlApplicationContext("META-INF/spring-test/test-context.xml");
		testUtilsContext = new ClassPathXmlApplicationContext("META-INF/spring-test/utils-context.xml");		
	}
	
	@Test
	public void testsubmitEventAndDetectionOfIt() {
		EsperEventProcessingAgent agent = applicationContext.getBean(EsperEventProcessingAgent.class);
		EventProducer producer = testUtilsContext.getBean(EventProducer.class);
		TestListener listener = testUtilsContext.getBean(TestListener.class);
		JmsTemplate jmsTemplate = testUtilsContext.getBean(JmsTemplate.class);
		
		boolean startSuccessfully = true;
		try {
			agent.start();
		} catch (URISyntaxException e) {
			e.printStackTrace();
			startSuccessfully = false;
		}		
		assertTrue(startSuccessfully);
		
		producer.generateEvents();
				
		assertEquals(listener.getReceivedMessages().size(), 100);
		
		for(Message message : listener.getReceivedMessages()){
			boolean corruptedMessage = false;
			
			try {
				String command = message.getStringProperty("command");
				assertEquals("startProcess", command);
			} catch (JMSException e) {
				corruptedMessage = true;
				e.printStackTrace();
			}
			
			assertFalse(corruptedMessage);
		}
	}
}
